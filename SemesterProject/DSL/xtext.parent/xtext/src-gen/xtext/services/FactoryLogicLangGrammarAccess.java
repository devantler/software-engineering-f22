/*
 * generated by Xtext 2.25.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FactoryLogicLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Model");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		//Model:
		//    declarations+=Declaration+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//declarations+=Declaration+
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeviceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//    Device | Logic
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Device | Logic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Device
		public RuleCall getDeviceParserRuleCall_0() { return cDeviceParserRuleCall_0; }
		
		//Logic
		public RuleCall getLogicParserRuleCall_1() { return cLogicParserRuleCall_1; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Device");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCraneParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStorageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCameraParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Device:
		//    Crane | Storage | Camera
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Crane | Storage | Camera
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Crane
		public RuleCall getCraneParserRuleCall_0() { return cCraneParserRuleCall_0; }
		
		//Storage
		public RuleCall getStorageParserRuleCall_1() { return cStorageParserRuleCall_1; }
		
		//Camera
		public RuleCall getCameraParserRuleCall_2() { return cCameraParserRuleCall_2; }
	}
	public class CraneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Crane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCraneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersCraneParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Crane:
		//    'create' 'crane' 'named' name=STRING BEGIN parameters+=CraneParameter+ END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'crane' 'named' name=STRING BEGIN parameters+=CraneParameter+ END
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'crane'
		public Keyword getCraneKeyword_1() { return cCraneKeyword_1; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//parameters+=CraneParameter+
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//CraneParameter
		public RuleCall getParametersCraneParameterParserRuleCall_5_0() { return cParametersCraneParameterParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class CraneParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.CraneParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPositionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDegreeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDegreeINTTerminalRuleCall_3_0 = (RuleCall)cDegreeAssignment_3.eContents().get(0);
		private final Keyword cNamedKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		
		//CraneParameter:
		//    'with' 'position' 'at' degree=INT 'named' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' 'position' 'at' degree=INT 'named' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'position'
		public Keyword getPositionKeyword_1() { return cPositionKeyword_1; }
		
		//'at'
		public Keyword getAtKeyword_2() { return cAtKeyword_2; }
		
		//degree=INT
		public Assignment getDegreeAssignment_3() { return cDegreeAssignment_3; }
		
		//INT
		public RuleCall getDegreeINTTerminalRuleCall_3_0() { return cDegreeINTTerminalRuleCall_3_0; }
		
		//'named'
		public Keyword getNamedKeyword_4() { return cNamedKeyword_4; }
		
		//name=STRING
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_5_0() { return cNameSTRINGTerminalRuleCall_5_0; }
	}
	public class StorageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Storage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStorageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersStorageParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Storage:
		//    'create' 'storage' 'named' name=STRING BEGIN parameters+=StorageParameter+ END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'storage' 'named' name=STRING BEGIN parameters+=StorageParameter+ END
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'storage'
		public Keyword getStorageKeyword_1() { return cStorageKeyword_1; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//parameters+=StorageParameter+
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//StorageParameter
		public RuleCall getParametersStorageParameterParserRuleCall_5_0() { return cParametersStorageParameterParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class StorageParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.StorageParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStoragePositionParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStorageSlotParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StorageParameter:
		//    StoragePositionParameter | StorageSlotParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StoragePositionParameter | StorageSlotParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StoragePositionParameter
		public RuleCall getStoragePositionParameterParserRuleCall_0() { return cStoragePositionParameterParserRuleCall_0; }
		
		//StorageSlotParameter
		public RuleCall getStorageSlotParameterParserRuleCall_1() { return cStorageSlotParameterParserRuleCall_1; }
	}
	public class StorageSlotParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.StorageSlotParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSlotsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSlotsINTTerminalRuleCall_1_0 = (RuleCall)cSlotsAssignment_1.eContents().get(0);
		private final Keyword cSlotsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StorageSlotParameter:
		//    "with" slots=INT "slots"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"with" slots=INT "slots"
		public Group getGroup() { return cGroup; }
		
		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//slots=INT
		public Assignment getSlotsAssignment_1() { return cSlotsAssignment_1; }
		
		//INT
		public RuleCall getSlotsINTTerminalRuleCall_1_0() { return cSlotsINTTerminalRuleCall_1_0; }
		
		//"slots"
		public Keyword getSlotsKeyword_2() { return cSlotsKeyword_2; }
	}
	public class StoragePositionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.StoragePositionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPositionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSlotKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSlotAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSlotINTTerminalRuleCall_4_0 = (RuleCall)cSlotAssignment_4.eContents().get(0);
		private final Keyword cNamedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameSTRINGTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		
		//StoragePositionParameter:
		//    'with' 'position' 'at' 'slot' slot=INT 'named' name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' 'position' 'at' 'slot' slot=INT 'named' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'position'
		public Keyword getPositionKeyword_1() { return cPositionKeyword_1; }
		
		//'at'
		public Keyword getAtKeyword_2() { return cAtKeyword_2; }
		
		//'slot'
		public Keyword getSlotKeyword_3() { return cSlotKeyword_3; }
		
		//slot=INT
		public Assignment getSlotAssignment_4() { return cSlotAssignment_4; }
		
		//INT
		public RuleCall getSlotINTTerminalRuleCall_4_0() { return cSlotINTTerminalRuleCall_4_0; }
		
		//'named'
		public Keyword getNamedKeyword_5() { return cNamedKeyword_5; }
		
		//name=STRING
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_6_0() { return cNameSTRINGTerminalRuleCall_6_0; }
	}
	public class CameraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Camera");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCameraKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersCameraParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Camera:
		//    'create' 'camera' 'named' name=STRING BEGIN parameters+=CameraParameter+ END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'camera' 'named' name=STRING BEGIN parameters+=CameraParameter+ END
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'camera'
		public Keyword getCameraKeyword_1() { return cCameraKeyword_1; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//parameters+=CameraParameter+
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//CameraParameter
		public RuleCall getParametersCameraParameterParserRuleCall_5_0() { return cParametersCameraParameterParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class CameraParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.CameraParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorCOLOREnumRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//CameraParameter:
		//    'with' 'color' color=COLOR
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' 'color' color=COLOR
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'color'
		public Keyword getColorKeyword_1() { return cColorKeyword_1; }
		
		//color=COLOR
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }
		
		//COLOR
		public RuleCall getColorCOLOREnumRuleCall_2_0() { return cColorCOLOREnumRuleCall_2_0; }
	}
	public class LogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Logic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Logic:
		//    Conditional | Loop | Operation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Conditional | Loop | Operation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_0() { return cConditionalParserRuleCall_0; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_1() { return cLoopParserRuleCall_1; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_2() { return cOperationParserRuleCall_2; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSourceDeviceCrossReference_2_1_0 = (CrossReference)cSourceAssignment_2_1.eContents().get(0);
		private final RuleCall cSourceDeviceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSourceDeviceCrossReference_2_1_0.eContents().get(1);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorBOOLEAN_OPERATOREnumRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cComparison_constAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cComparison_constCONST_VARIABLESEnumRuleCall_5_0_0 = (RuleCall)cComparison_constAssignment_5_0.eContents().get(0);
		private final Assignment cComparison_colorAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cComparison_colorCOLOREnumRuleCall_5_1_0 = (RuleCall)cComparison_colorAssignment_5_1.eContents().get(0);
		private final Assignment cComparison_intAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cComparison_intINTTerminalRuleCall_5_2_0 = (RuleCall)cComparison_intAssignment_5_2.eContents().get(0);
		private final Keyword cThenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cBEGINTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cLogicsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLogicsLogicParserRuleCall_8_0 = (RuleCall)cLogicsAssignment_8.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//Conditional:
		//    "if" variable=ID ('of' source=[Device])? 'is' (operator=BOOLEAN_OPERATOR)? ((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT)) 'then' BEGIN logics+=Logic+ END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" variable=ID ('of' source=[Device])? 'is' (operator=BOOLEAN_OPERATOR)? ((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT)) 'then' BEGIN logics+=Logic+ END
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }
		
		//('of' source=[Device])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'of'
		public Keyword getOfKeyword_2_0() { return cOfKeyword_2_0; }
		
		//source=[Device]
		public Assignment getSourceAssignment_2_1() { return cSourceAssignment_2_1; }
		
		//[Device]
		public CrossReference getSourceDeviceCrossReference_2_1_0() { return cSourceDeviceCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSourceDeviceIDTerminalRuleCall_2_1_0_1() { return cSourceDeviceIDTerminalRuleCall_2_1_0_1; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//(operator=BOOLEAN_OPERATOR)?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//BOOLEAN_OPERATOR
		public RuleCall getOperatorBOOLEAN_OPERATOREnumRuleCall_4_0() { return cOperatorBOOLEAN_OPERATOREnumRuleCall_4_0; }
		
		//((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT))
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//(comparison_const=CONST_VARIABLES)
		public Assignment getComparison_constAssignment_5_0() { return cComparison_constAssignment_5_0; }
		
		//CONST_VARIABLES
		public RuleCall getComparison_constCONST_VARIABLESEnumRuleCall_5_0_0() { return cComparison_constCONST_VARIABLESEnumRuleCall_5_0_0; }
		
		//(comparison_color=COLOR)
		public Assignment getComparison_colorAssignment_5_1() { return cComparison_colorAssignment_5_1; }
		
		//COLOR
		public RuleCall getComparison_colorCOLOREnumRuleCall_5_1_0() { return cComparison_colorCOLOREnumRuleCall_5_1_0; }
		
		//(comparison_int=INT)
		public Assignment getComparison_intAssignment_5_2() { return cComparison_intAssignment_5_2; }
		
		//INT
		public RuleCall getComparison_intINTTerminalRuleCall_5_2_0() { return cComparison_intINTTerminalRuleCall_5_2_0; }
		
		//'then'
		public Keyword getThenKeyword_6() { return cThenKeyword_6; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_7() { return cBEGINTerminalRuleCall_7; }
		
		//logics+=Logic+
		public Assignment getLogicsAssignment_8() { return cLogicsAssignment_8; }
		
		//Logic
		public RuleCall getLogicsLogicParserRuleCall_8_0() { return cLogicsLogicParserRuleCall_8_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cListIDTerminalRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOfKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSourceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSourceDeviceCrossReference_5_1_0 = (CrossReference)cSourceAssignment_5_1.eContents().get(0);
		private final RuleCall cSourceDeviceIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSourceDeviceCrossReference_5_1_0.eContents().get(1);
		private final Keyword cThatKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOperatorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOperatorBOOLEAN_OPERATOREnumRuleCall_8_0 = (RuleCall)cOperatorAssignment_8.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cComparison_constAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final RuleCall cComparison_constCONST_VARIABLESEnumRuleCall_9_0_0 = (RuleCall)cComparison_constAssignment_9_0.eContents().get(0);
		private final Assignment cComparison_colorAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cComparison_colorCOLOREnumRuleCall_9_1_0 = (RuleCall)cComparison_colorAssignment_9_1.eContents().get(0);
		private final Assignment cComparison_intAssignment_9_2 = (Assignment)cAlternatives_9.eContents().get(2);
		private final RuleCall cComparison_intINTTerminalRuleCall_9_2_0 = (RuleCall)cComparison_intAssignment_9_2.eContents().get(0);
		private final Keyword cThenKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cBEGINTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Assignment cLogicsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cLogicsLogicParserRuleCall_12_0 = (RuleCall)cLogicsAssignment_12.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		
		//Loop:
		//    'for' 'each' name=ID 'in' list=ID ('of' source=[Device])? 'that' 'is' (operator=BOOLEAN_OPERATOR)? ((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT)) 'then' BEGIN logics+=Logic+ END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' 'each' name=ID 'in' list=ID ('of' source=[Device])? 'that' 'is' (operator=BOOLEAN_OPERATOR)? ((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT)) 'then' BEGIN logics+=Logic+ END
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'each'
		public Keyword getEachKeyword_1() { return cEachKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//list=ID
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//ID
		public RuleCall getListIDTerminalRuleCall_4_0() { return cListIDTerminalRuleCall_4_0; }
		
		//('of' source=[Device])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'of'
		public Keyword getOfKeyword_5_0() { return cOfKeyword_5_0; }
		
		//source=[Device]
		public Assignment getSourceAssignment_5_1() { return cSourceAssignment_5_1; }
		
		//[Device]
		public CrossReference getSourceDeviceCrossReference_5_1_0() { return cSourceDeviceCrossReference_5_1_0; }
		
		//ID
		public RuleCall getSourceDeviceIDTerminalRuleCall_5_1_0_1() { return cSourceDeviceIDTerminalRuleCall_5_1_0_1; }
		
		//'that'
		public Keyword getThatKeyword_6() { return cThatKeyword_6; }
		
		//'is'
		public Keyword getIsKeyword_7() { return cIsKeyword_7; }
		
		//(operator=BOOLEAN_OPERATOR)?
		public Assignment getOperatorAssignment_8() { return cOperatorAssignment_8; }
		
		//BOOLEAN_OPERATOR
		public RuleCall getOperatorBOOLEAN_OPERATOREnumRuleCall_8_0() { return cOperatorBOOLEAN_OPERATOREnumRuleCall_8_0; }
		
		//((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT))
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//(comparison_const=CONST_VARIABLES)
		public Assignment getComparison_constAssignment_9_0() { return cComparison_constAssignment_9_0; }
		
		//CONST_VARIABLES
		public RuleCall getComparison_constCONST_VARIABLESEnumRuleCall_9_0_0() { return cComparison_constCONST_VARIABLESEnumRuleCall_9_0_0; }
		
		//(comparison_color=COLOR)
		public Assignment getComparison_colorAssignment_9_1() { return cComparison_colorAssignment_9_1; }
		
		//COLOR
		public RuleCall getComparison_colorCOLOREnumRuleCall_9_1_0() { return cComparison_colorCOLOREnumRuleCall_9_1_0; }
		
		//(comparison_int=INT)
		public Assignment getComparison_intAssignment_9_2() { return cComparison_intAssignment_9_2; }
		
		//INT
		public RuleCall getComparison_intINTTerminalRuleCall_9_2_0() { return cComparison_intINTTerminalRuleCall_9_2_0; }
		
		//'then'
		public Keyword getThenKeyword_10() { return cThenKeyword_10; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_11() { return cBEGINTerminalRuleCall_11; }
		
		//logics+=Logic+
		public Assignment getLogicsAssignment_12() { return cLogicsAssignment_12; }
		
		//Logic
		public RuleCall getLogicsLogicParserRuleCall_12_0() { return cLogicsLogicParserRuleCall_12_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_13() { return cENDTerminalRuleCall_13; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStorageMoveEmptySlotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStorageMoveSlotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStorageMarkSlotParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCameraScanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCranePickupParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCraneDropParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Operation:
		//    StorageMoveEmptySlot | StorageMoveSlot | StorageMarkSlot | CameraScan | CranePickup | CraneDrop
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StorageMoveEmptySlot | StorageMoveSlot | StorageMarkSlot | CameraScan | CranePickup | CraneDrop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StorageMoveEmptySlot
		public RuleCall getStorageMoveEmptySlotParserRuleCall_0() { return cStorageMoveEmptySlotParserRuleCall_0; }
		
		//StorageMoveSlot
		public RuleCall getStorageMoveSlotParserRuleCall_1() { return cStorageMoveSlotParserRuleCall_1; }
		
		//StorageMarkSlot
		public RuleCall getStorageMarkSlotParserRuleCall_2() { return cStorageMarkSlotParserRuleCall_2; }
		
		//CameraScan
		public RuleCall getCameraScanParserRuleCall_3() { return cCameraScanParserRuleCall_3; }
		
		//CranePickup
		public RuleCall getCranePickupParserRuleCall_4() { return cCranePickupParserRuleCall_4; }
		
		//CraneDrop
		public RuleCall getCraneDropParserRuleCall_5() { return cCraneDropParserRuleCall_5; }
	}
	public class StorageMoveEmptySlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.StorageMoveEmptySlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeviceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeviceStorageCrossReference_0_0 = (CrossReference)cDeviceAssignment_0.eContents().get(0);
		private final RuleCall cDeviceStorageIDTerminalRuleCall_0_0_1 = (RuleCall)cDeviceStorageCrossReference_0_0.eContents().get(1);
		private final Keyword cMoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEmptyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSlotKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDestinationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cDestinationStoragePositionParameterCrossReference_5_0 = (CrossReference)cDestinationAssignment_5.eContents().get(0);
		private final RuleCall cDestinationStoragePositionParameterIDTerminalRuleCall_5_0_1 = (RuleCall)cDestinationStoragePositionParameterCrossReference_5_0.eContents().get(1);
		
		//StorageMoveEmptySlot:
		//    device=[Storage] 'move' 'empty' 'slot' 'to' destination=[StoragePositionParameter]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//device=[Storage] 'move' 'empty' 'slot' 'to' destination=[StoragePositionParameter]
		public Group getGroup() { return cGroup; }
		
		//device=[Storage]
		public Assignment getDeviceAssignment_0() { return cDeviceAssignment_0; }
		
		//[Storage]
		public CrossReference getDeviceStorageCrossReference_0_0() { return cDeviceStorageCrossReference_0_0; }
		
		//ID
		public RuleCall getDeviceStorageIDTerminalRuleCall_0_0_1() { return cDeviceStorageIDTerminalRuleCall_0_0_1; }
		
		//'move'
		public Keyword getMoveKeyword_1() { return cMoveKeyword_1; }
		
		//'empty'
		public Keyword getEmptyKeyword_2() { return cEmptyKeyword_2; }
		
		//'slot'
		public Keyword getSlotKeyword_3() { return cSlotKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//destination=[StoragePositionParameter]
		public Assignment getDestinationAssignment_5() { return cDestinationAssignment_5; }
		
		//[StoragePositionParameter]
		public CrossReference getDestinationStoragePositionParameterCrossReference_5_0() { return cDestinationStoragePositionParameterCrossReference_5_0; }
		
		//ID
		public RuleCall getDestinationStoragePositionParameterIDTerminalRuleCall_5_0_1() { return cDestinationStoragePositionParameterIDTerminalRuleCall_5_0_1; }
	}
	public class StorageMoveSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.StorageMoveSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeviceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeviceStorageCrossReference_0_0 = (CrossReference)cDeviceAssignment_0.eContents().get(0);
		private final RuleCall cDeviceStorageIDTerminalRuleCall_0_0_1 = (RuleCall)cDeviceStorageCrossReference_0_0.eContents().get(1);
		private final Keyword cMoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSlotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPositionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPositionStoragePositionParameterCrossReference_4_0 = (CrossReference)cPositionAssignment_4.eContents().get(0);
		private final RuleCall cPositionStoragePositionParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cPositionStoragePositionParameterCrossReference_4_0.eContents().get(1);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDestinationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDestinationStoragePositionParameterCrossReference_6_0 = (CrossReference)cDestinationAssignment_6.eContents().get(0);
		private final RuleCall cDestinationStoragePositionParameterIDTerminalRuleCall_6_0_1 = (RuleCall)cDestinationStoragePositionParameterCrossReference_6_0.eContents().get(1);
		
		//StorageMoveSlot:
		//    device=[Storage] 'move' 'slot' 'at' position=[StoragePositionParameter] 'to' destination=[StoragePositionParameter]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//device=[Storage] 'move' 'slot' 'at' position=[StoragePositionParameter] 'to' destination=[StoragePositionParameter]
		public Group getGroup() { return cGroup; }
		
		//device=[Storage]
		public Assignment getDeviceAssignment_0() { return cDeviceAssignment_0; }
		
		//[Storage]
		public CrossReference getDeviceStorageCrossReference_0_0() { return cDeviceStorageCrossReference_0_0; }
		
		//ID
		public RuleCall getDeviceStorageIDTerminalRuleCall_0_0_1() { return cDeviceStorageIDTerminalRuleCall_0_0_1; }
		
		//'move'
		public Keyword getMoveKeyword_1() { return cMoveKeyword_1; }
		
		//'slot'
		public Keyword getSlotKeyword_2() { return cSlotKeyword_2; }
		
		//'at'
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//position=[StoragePositionParameter]
		public Assignment getPositionAssignment_4() { return cPositionAssignment_4; }
		
		//[StoragePositionParameter]
		public CrossReference getPositionStoragePositionParameterCrossReference_4_0() { return cPositionStoragePositionParameterCrossReference_4_0; }
		
		//ID
		public RuleCall getPositionStoragePositionParameterIDTerminalRuleCall_4_0_1() { return cPositionStoragePositionParameterIDTerminalRuleCall_4_0_1; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//destination=[StoragePositionParameter]
		public Assignment getDestinationAssignment_6() { return cDestinationAssignment_6; }
		
		//[StoragePositionParameter]
		public CrossReference getDestinationStoragePositionParameterCrossReference_6_0() { return cDestinationStoragePositionParameterCrossReference_6_0; }
		
		//ID
		public RuleCall getDestinationStoragePositionParameterIDTerminalRuleCall_6_0_1() { return cDestinationStoragePositionParameterIDTerminalRuleCall_6_0_1; }
	}
	public class StorageMarkSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.StorageMarkSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeviceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeviceStorageCrossReference_0_0 = (CrossReference)cDeviceAssignment_0.eContents().get(0);
		private final RuleCall cDeviceStorageIDTerminalRuleCall_0_0_1 = (RuleCall)cDeviceStorageCrossReference_0_0.eContents().get(1);
		private final Keyword cMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSlotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPositionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPositionStoragePositionParameterCrossReference_4_0 = (CrossReference)cPositionAssignment_4.eContents().get(0);
		private final RuleCall cPositionStoragePositionParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cPositionStoragePositionParameterCrossReference_4_0.eContents().get(1);
		private final Keyword cAsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cComparison_constAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cComparison_constCONST_VARIABLESEnumRuleCall_6_0_0 = (RuleCall)cComparison_constAssignment_6_0.eContents().get(0);
		private final Assignment cComparison_colorAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cComparison_colorCOLOREnumRuleCall_6_1_0 = (RuleCall)cComparison_colorAssignment_6_1.eContents().get(0);
		private final Assignment cComparison_intAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cComparison_intINTTerminalRuleCall_6_2_0 = (RuleCall)cComparison_intAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cQuantityAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cQuantityINTTerminalRuleCall_7_1_0 = (RuleCall)cQuantityAssignment_7_1.eContents().get(0);
		private final Assignment cMeasureAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMeasureTIMEEnumRuleCall_7_2_0 = (RuleCall)cMeasureAssignment_7_2.eContents().get(0);
		
		//StorageMarkSlot:
		//    device=[Storage] 'mark' 'slot' 'at' position=[StoragePositionParameter] 'as' ((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT)) ('in' quantity=INT measure=TIME)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//device=[Storage] 'mark' 'slot' 'at' position=[StoragePositionParameter] 'as' ((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT)) ('in' quantity=INT measure=TIME)?
		public Group getGroup() { return cGroup; }
		
		//device=[Storage]
		public Assignment getDeviceAssignment_0() { return cDeviceAssignment_0; }
		
		//[Storage]
		public CrossReference getDeviceStorageCrossReference_0_0() { return cDeviceStorageCrossReference_0_0; }
		
		//ID
		public RuleCall getDeviceStorageIDTerminalRuleCall_0_0_1() { return cDeviceStorageIDTerminalRuleCall_0_0_1; }
		
		//'mark'
		public Keyword getMarkKeyword_1() { return cMarkKeyword_1; }
		
		//'slot'
		public Keyword getSlotKeyword_2() { return cSlotKeyword_2; }
		
		//'at'
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//position=[StoragePositionParameter]
		public Assignment getPositionAssignment_4() { return cPositionAssignment_4; }
		
		//[StoragePositionParameter]
		public CrossReference getPositionStoragePositionParameterCrossReference_4_0() { return cPositionStoragePositionParameterCrossReference_4_0; }
		
		//ID
		public RuleCall getPositionStoragePositionParameterIDTerminalRuleCall_4_0_1() { return cPositionStoragePositionParameterIDTerminalRuleCall_4_0_1; }
		
		//'as'
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }
		
		//((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT))
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//(comparison_const=CONST_VARIABLES)
		public Assignment getComparison_constAssignment_6_0() { return cComparison_constAssignment_6_0; }
		
		//CONST_VARIABLES
		public RuleCall getComparison_constCONST_VARIABLESEnumRuleCall_6_0_0() { return cComparison_constCONST_VARIABLESEnumRuleCall_6_0_0; }
		
		//(comparison_color=COLOR)
		public Assignment getComparison_colorAssignment_6_1() { return cComparison_colorAssignment_6_1; }
		
		//COLOR
		public RuleCall getComparison_colorCOLOREnumRuleCall_6_1_0() { return cComparison_colorCOLOREnumRuleCall_6_1_0; }
		
		//(comparison_int=INT)
		public Assignment getComparison_intAssignment_6_2() { return cComparison_intAssignment_6_2; }
		
		//INT
		public RuleCall getComparison_intINTTerminalRuleCall_6_2_0() { return cComparison_intINTTerminalRuleCall_6_2_0; }
		
		//('in' quantity=INT measure=TIME)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'in'
		public Keyword getInKeyword_7_0() { return cInKeyword_7_0; }
		
		//quantity=INT
		public Assignment getQuantityAssignment_7_1() { return cQuantityAssignment_7_1; }
		
		//INT
		public RuleCall getQuantityINTTerminalRuleCall_7_1_0() { return cQuantityINTTerminalRuleCall_7_1_0; }
		
		//measure=TIME
		public Assignment getMeasureAssignment_7_2() { return cMeasureAssignment_7_2; }
		
		//TIME
		public RuleCall getMeasureTIMEEnumRuleCall_7_2_0() { return cMeasureTIMEEnumRuleCall_7_2_0; }
	}
	public class CameraScanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.CameraScan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeviceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeviceCameraCrossReference_0_0 = (CrossReference)cDeviceAssignment_0.eContents().get(0);
		private final RuleCall cDeviceCameraIDTerminalRuleCall_0_0_1 = (RuleCall)cDeviceCameraCrossReference_0_0.eContents().get(1);
		private final Keyword cScanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIntoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//CameraScan:
		//    device=[Camera] 'scan' 'color' 'into' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//device=[Camera] 'scan' 'color' 'into' name=ID
		public Group getGroup() { return cGroup; }
		
		//device=[Camera]
		public Assignment getDeviceAssignment_0() { return cDeviceAssignment_0; }
		
		//[Camera]
		public CrossReference getDeviceCameraCrossReference_0_0() { return cDeviceCameraCrossReference_0_0; }
		
		//ID
		public RuleCall getDeviceCameraIDTerminalRuleCall_0_0_1() { return cDeviceCameraIDTerminalRuleCall_0_0_1; }
		
		//'scan'
		public Keyword getScanKeyword_1() { return cScanKeyword_1; }
		
		//'color'
		public Keyword getColorKeyword_2() { return cColorKeyword_2; }
		
		//'into'
		public Keyword getIntoKeyword_3() { return cIntoKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class CranePickupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.CranePickup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeviceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeviceCraneCrossReference_0_0 = (CrossReference)cDeviceAssignment_0.eContents().get(0);
		private final RuleCall cDeviceCraneIDTerminalRuleCall_0_0_1 = (RuleCall)cDeviceCraneCrossReference_0_0.eContents().get(1);
		private final Keyword cPickupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cItemKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLocationCraneParameterCrossReference_4_0 = (CrossReference)cLocationAssignment_4.eContents().get(0);
		private final RuleCall cLocationCraneParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cLocationCraneParameterCrossReference_4_0.eContents().get(1);
		
		//CranePickup:
		//    device=[Crane] 'pickup' 'item' 'at' location=[CraneParameter]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//device=[Crane] 'pickup' 'item' 'at' location=[CraneParameter]
		public Group getGroup() { return cGroup; }
		
		//device=[Crane]
		public Assignment getDeviceAssignment_0() { return cDeviceAssignment_0; }
		
		//[Crane]
		public CrossReference getDeviceCraneCrossReference_0_0() { return cDeviceCraneCrossReference_0_0; }
		
		//ID
		public RuleCall getDeviceCraneIDTerminalRuleCall_0_0_1() { return cDeviceCraneIDTerminalRuleCall_0_0_1; }
		
		//'pickup'
		public Keyword getPickupKeyword_1() { return cPickupKeyword_1; }
		
		//'item'
		public Keyword getItemKeyword_2() { return cItemKeyword_2; }
		
		//'at'
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//location=[CraneParameter]
		public Assignment getLocationAssignment_4() { return cLocationAssignment_4; }
		
		//[CraneParameter]
		public CrossReference getLocationCraneParameterCrossReference_4_0() { return cLocationCraneParameterCrossReference_4_0; }
		
		//ID
		public RuleCall getLocationCraneParameterIDTerminalRuleCall_4_0_1() { return cLocationCraneParameterIDTerminalRuleCall_4_0_1; }
	}
	public class CraneDropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.CraneDrop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeviceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeviceCraneCrossReference_0_0 = (CrossReference)cDeviceAssignment_0.eContents().get(0);
		private final RuleCall cDeviceCraneIDTerminalRuleCall_0_0_1 = (RuleCall)cDeviceCraneCrossReference_0_0.eContents().get(1);
		private final Keyword cDropKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cItemKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cLocationCraneParameterCrossReference_4_0 = (CrossReference)cLocationAssignment_4.eContents().get(0);
		private final RuleCall cLocationCraneParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cLocationCraneParameterCrossReference_4_0.eContents().get(1);
		
		//CraneDrop:
		//    device=[Crane] 'drop' 'item' 'at' location=[CraneParameter]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//device=[Crane] 'drop' 'item' 'at' location=[CraneParameter]
		public Group getGroup() { return cGroup; }
		
		//device=[Crane]
		public Assignment getDeviceAssignment_0() { return cDeviceAssignment_0; }
		
		//[Crane]
		public CrossReference getDeviceCraneCrossReference_0_0() { return cDeviceCraneCrossReference_0_0; }
		
		//ID
		public RuleCall getDeviceCraneIDTerminalRuleCall_0_0_1() { return cDeviceCraneIDTerminalRuleCall_0_0_1; }
		
		//'drop'
		public Keyword getDropKeyword_1() { return cDropKeyword_1; }
		
		//'item'
		public Keyword getItemKeyword_2() { return cItemKeyword_2; }
		
		//'at'
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//location=[CraneParameter]
		public Assignment getLocationAssignment_4() { return cLocationAssignment_4; }
		
		//[CraneParameter]
		public CrossReference getLocationCraneParameterCrossReference_4_0() { return cLocationCraneParameterCrossReference_4_0; }
		
		//ID
		public RuleCall getLocationCraneParameterIDTerminalRuleCall_4_0_1() { return cLocationCraneParameterIDTerminalRuleCall_4_0_1; }
	}
	
	public class COLORElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.COLOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLUEBlueKeyword_1_0 = (Keyword)cBLUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREENGreenKeyword_2_0 = (Keyword)cGREENEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum COLOR:
		//    RED='red'|BLUE='blue'|GREEN='green'
		//;
		public EnumRule getRule() { return rule; }
		
		//RED='red'|BLUE='blue'|GREEN='green'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RED='red'
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }
		
		//BLUE='blue'
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_1() { return cBLUEEnumLiteralDeclaration_1; }
		
		//'blue'
		public Keyword getBLUEBlueKeyword_1_0() { return cBLUEBlueKeyword_1_0; }
		
		//GREEN='green'
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_2() { return cGREENEnumLiteralDeclaration_2; }
		
		//'green'
		public Keyword getGREENGreenKeyword_2_0() { return cGREENGreenKeyword_2_0; }
	}
	public class CONST_VARIABLESElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.CONST_VARIABLES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFULLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFULLFullKeyword_0_0 = (Keyword)cFULLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFINISHEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFINISHEDFinishedKeyword_1_0 = (Keyword)cFINISHEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEMPTYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEMPTYEmptyKeyword_2_0 = (Keyword)cEMPTYEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum CONST_VARIABLES:
		//    FULL='full'|FINISHED='finished'|EMPTY='empty'
		//;
		public EnumRule getRule() { return rule; }
		
		//FULL='full'|FINISHED='finished'|EMPTY='empty'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FULL='full'
		public EnumLiteralDeclaration getFULLEnumLiteralDeclaration_0() { return cFULLEnumLiteralDeclaration_0; }
		
		//'full'
		public Keyword getFULLFullKeyword_0_0() { return cFULLFullKeyword_0_0; }
		
		//FINISHED='finished'
		public EnumLiteralDeclaration getFINISHEDEnumLiteralDeclaration_1() { return cFINISHEDEnumLiteralDeclaration_1; }
		
		//'finished'
		public Keyword getFINISHEDFinishedKeyword_1_0() { return cFINISHEDFinishedKeyword_1_0; }
		
		//EMPTY='empty'
		public EnumLiteralDeclaration getEMPTYEnumLiteralDeclaration_2() { return cEMPTYEnumLiteralDeclaration_2; }
		
		//'empty'
		public Keyword getEMPTYEmptyKeyword_2_0() { return cEMPTYEmptyKeyword_2_0; }
	}
	public class BOOLEAN_OPERATORElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.BOOLEAN_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNOTNotKeyword_0_0 = (Keyword)cNOTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESSLessThanKeyword_1_0 = (Keyword)cLESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATERGreaterThanKeyword_2_0 = (Keyword)cGREATEREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BOOLEAN_OPERATOR:
		//    NOT='not'|LESS='less than'|GREATER='greater than'
		//;
		public EnumRule getRule() { return rule; }
		
		//NOT='not'|LESS='less than'|GREATER='greater than'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NOT='not'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_0() { return cNOTEnumLiteralDeclaration_0; }
		
		//'not'
		public Keyword getNOTNotKeyword_0_0() { return cNOTNotKeyword_0_0; }
		
		//LESS='less than'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_1() { return cLESSEnumLiteralDeclaration_1; }
		
		//'less than'
		public Keyword getLESSLessThanKeyword_1_0() { return cLESSLessThanKeyword_1_0; }
		
		//GREATER='greater than'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_2() { return cGREATEREnumLiteralDeclaration_2; }
		
		//'greater than'
		public Keyword getGREATERGreaterThanKeyword_2_0() { return cGREATERGreaterThanKeyword_2_0; }
	}
	public class TIMEElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.TIME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSecondsKeyword_0_0 = (Keyword)cSECONDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSECONDSecondKeyword_1_0 = (Keyword)cSECONDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINUTEMinutesKeyword_2_0 = (Keyword)cMINUTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMINUTEMinuteKeyword_3_0 = (Keyword)cMINUTEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cHOURHoursKeyword_4_0 = (Keyword)cHOUREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHOURHourKeyword_5_0 = (Keyword)cHOUREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TIME:
		//    SECOND='seconds'|SECOND='second'|MINUTE='minutes'|MINUTE='minute'|HOUR='hours'|HOUR='hour'
		//;
		public EnumRule getRule() { return rule; }
		
		//SECOND='seconds'|SECOND='second'|MINUTE='minutes'|MINUTE='minute'|HOUR='hours'|HOUR='hour'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECOND='seconds'
		public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_0() { return cSECONDEnumLiteralDeclaration_0; }
		
		//'seconds'
		public Keyword getSECONDSecondsKeyword_0_0() { return cSECONDSecondsKeyword_0_0; }
		
		//SECOND='second'
		public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_1() { return cSECONDEnumLiteralDeclaration_1; }
		
		//'second'
		public Keyword getSECONDSecondKeyword_1_0() { return cSECONDSecondKeyword_1_0; }
		
		//MINUTE='minutes'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_2() { return cMINUTEEnumLiteralDeclaration_2; }
		
		//'minutes'
		public Keyword getMINUTEMinutesKeyword_2_0() { return cMINUTEMinutesKeyword_2_0; }
		
		//MINUTE='minute'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_3() { return cMINUTEEnumLiteralDeclaration_3; }
		
		//'minute'
		public Keyword getMINUTEMinuteKeyword_3_0() { return cMINUTEMinuteKeyword_3_0; }
		
		//HOUR='hours'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_4() { return cHOUREnumLiteralDeclaration_4; }
		
		//'hours'
		public Keyword getHOURHoursKeyword_4_0() { return cHOURHoursKeyword_4_0; }
		
		//HOUR='hour'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_5() { return cHOUREnumLiteralDeclaration_5; }
		
		//'hour'
		public Keyword getHOURHourKeyword_5_0() { return cHOURHourKeyword_5_0; }
	}
	
	private final ModelElements pModel;
	private final DeclarationElements pDeclaration;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final DeviceElements pDevice;
	private final CraneElements pCrane;
	private final CraneParameterElements pCraneParameter;
	private final StorageElements pStorage;
	private final StorageParameterElements pStorageParameter;
	private final StorageSlotParameterElements pStorageSlotParameter;
	private final StoragePositionParameterElements pStoragePositionParameter;
	private final CameraElements pCamera;
	private final CameraParameterElements pCameraParameter;
	private final COLORElements eCOLOR;
	private final CONST_VARIABLESElements eCONST_VARIABLES;
	private final LogicElements pLogic;
	private final ConditionalElements pConditional;
	private final BOOLEAN_OPERATORElements eBOOLEAN_OPERATOR;
	private final LoopElements pLoop;
	private final OperationElements pOperation;
	private final StorageMoveEmptySlotElements pStorageMoveEmptySlot;
	private final StorageMoveSlotElements pStorageMoveSlot;
	private final StorageMarkSlotElements pStorageMarkSlot;
	private final TIMEElements eTIME;
	private final CameraScanElements pCameraScan;
	private final CranePickupElements pCranePickup;
	private final CraneDropElements pCraneDrop;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FactoryLogicLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDeclaration = new DeclarationElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.END");
		this.pDevice = new DeviceElements();
		this.pCrane = new CraneElements();
		this.pCraneParameter = new CraneParameterElements();
		this.pStorage = new StorageElements();
		this.pStorageParameter = new StorageParameterElements();
		this.pStorageSlotParameter = new StorageSlotParameterElements();
		this.pStoragePositionParameter = new StoragePositionParameterElements();
		this.pCamera = new CameraElements();
		this.pCameraParameter = new CameraParameterElements();
		this.eCOLOR = new COLORElements();
		this.eCONST_VARIABLES = new CONST_VARIABLESElements();
		this.pLogic = new LogicElements();
		this.pConditional = new ConditionalElements();
		this.eBOOLEAN_OPERATOR = new BOOLEAN_OPERATORElements();
		this.pLoop = new LoopElements();
		this.pOperation = new OperationElements();
		this.pStorageMoveEmptySlot = new StorageMoveEmptySlotElements();
		this.pStorageMoveSlot = new StorageMoveSlotElements();
		this.pStorageMarkSlot = new StorageMarkSlotElements();
		this.eTIME = new TIMEElements();
		this.pCameraScan = new CameraScanElements();
		this.pCranePickup = new CranePickupElements();
		this.pCraneDrop = new CraneDropElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.FactoryLogicLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    declarations+=Declaration+
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Declaration:
	//    Device | Logic
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//terminal BEGIN:
	//    "synthetic:BEGIN"
	//;
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//    "synthetic:END"
	//;
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//Device:
	//    Crane | Storage | Camera
	//;
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//Crane:
	//    'create' 'crane' 'named' name=STRING BEGIN parameters+=CraneParameter+ END
	//;
	public CraneElements getCraneAccess() {
		return pCrane;
	}
	
	public ParserRule getCraneRule() {
		return getCraneAccess().getRule();
	}
	
	//CraneParameter:
	//    'with' 'position' 'at' degree=INT 'named' name=STRING
	//;
	public CraneParameterElements getCraneParameterAccess() {
		return pCraneParameter;
	}
	
	public ParserRule getCraneParameterRule() {
		return getCraneParameterAccess().getRule();
	}
	
	//Storage:
	//    'create' 'storage' 'named' name=STRING BEGIN parameters+=StorageParameter+ END
	//;
	public StorageElements getStorageAccess() {
		return pStorage;
	}
	
	public ParserRule getStorageRule() {
		return getStorageAccess().getRule();
	}
	
	//StorageParameter:
	//    StoragePositionParameter | StorageSlotParameter
	//;
	public StorageParameterElements getStorageParameterAccess() {
		return pStorageParameter;
	}
	
	public ParserRule getStorageParameterRule() {
		return getStorageParameterAccess().getRule();
	}
	
	//StorageSlotParameter:
	//    "with" slots=INT "slots"
	//;
	public StorageSlotParameterElements getStorageSlotParameterAccess() {
		return pStorageSlotParameter;
	}
	
	public ParserRule getStorageSlotParameterRule() {
		return getStorageSlotParameterAccess().getRule();
	}
	
	//StoragePositionParameter:
	//    'with' 'position' 'at' 'slot' slot=INT 'named' name=STRING
	//;
	public StoragePositionParameterElements getStoragePositionParameterAccess() {
		return pStoragePositionParameter;
	}
	
	public ParserRule getStoragePositionParameterRule() {
		return getStoragePositionParameterAccess().getRule();
	}
	
	//Camera:
	//    'create' 'camera' 'named' name=STRING BEGIN parameters+=CameraParameter+ END
	//;
	public CameraElements getCameraAccess() {
		return pCamera;
	}
	
	public ParserRule getCameraRule() {
		return getCameraAccess().getRule();
	}
	
	//CameraParameter:
	//    'with' 'color' color=COLOR
	//;
	public CameraParameterElements getCameraParameterAccess() {
		return pCameraParameter;
	}
	
	public ParserRule getCameraParameterRule() {
		return getCameraParameterAccess().getRule();
	}
	
	//enum COLOR:
	//    RED='red'|BLUE='blue'|GREEN='green'
	//;
	public COLORElements getCOLORAccess() {
		return eCOLOR;
	}
	
	public EnumRule getCOLORRule() {
		return getCOLORAccess().getRule();
	}
	
	//enum CONST_VARIABLES:
	//    FULL='full'|FINISHED='finished'|EMPTY='empty'
	//;
	public CONST_VARIABLESElements getCONST_VARIABLESAccess() {
		return eCONST_VARIABLES;
	}
	
	public EnumRule getCONST_VARIABLESRule() {
		return getCONST_VARIABLESAccess().getRule();
	}
	
	//Logic:
	//    Conditional | Loop | Operation
	//;
	public LogicElements getLogicAccess() {
		return pLogic;
	}
	
	public ParserRule getLogicRule() {
		return getLogicAccess().getRule();
	}
	
	//Conditional:
	//    "if" variable=ID ('of' source=[Device])? 'is' (operator=BOOLEAN_OPERATOR)? ((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT)) 'then' BEGIN logics+=Logic+ END
	//;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//enum BOOLEAN_OPERATOR:
	//    NOT='not'|LESS='less than'|GREATER='greater than'
	//;
	public BOOLEAN_OPERATORElements getBOOLEAN_OPERATORAccess() {
		return eBOOLEAN_OPERATOR;
	}
	
	public EnumRule getBOOLEAN_OPERATORRule() {
		return getBOOLEAN_OPERATORAccess().getRule();
	}
	
	//Loop:
	//    'for' 'each' name=ID 'in' list=ID ('of' source=[Device])? 'that' 'is' (operator=BOOLEAN_OPERATOR)? ((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT)) 'then' BEGIN logics+=Logic+ END
	//;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Operation:
	//    StorageMoveEmptySlot | StorageMoveSlot | StorageMarkSlot | CameraScan | CranePickup | CraneDrop
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//StorageMoveEmptySlot:
	//    device=[Storage] 'move' 'empty' 'slot' 'to' destination=[StoragePositionParameter]
	//;
	public StorageMoveEmptySlotElements getStorageMoveEmptySlotAccess() {
		return pStorageMoveEmptySlot;
	}
	
	public ParserRule getStorageMoveEmptySlotRule() {
		return getStorageMoveEmptySlotAccess().getRule();
	}
	
	//StorageMoveSlot:
	//    device=[Storage] 'move' 'slot' 'at' position=[StoragePositionParameter] 'to' destination=[StoragePositionParameter]
	//;
	public StorageMoveSlotElements getStorageMoveSlotAccess() {
		return pStorageMoveSlot;
	}
	
	public ParserRule getStorageMoveSlotRule() {
		return getStorageMoveSlotAccess().getRule();
	}
	
	//StorageMarkSlot:
	//    device=[Storage] 'mark' 'slot' 'at' position=[StoragePositionParameter] 'as' ((comparison_const=CONST_VARIABLES)|(comparison_color=COLOR)|(comparison_int=INT)) ('in' quantity=INT measure=TIME)?
	//;
	public StorageMarkSlotElements getStorageMarkSlotAccess() {
		return pStorageMarkSlot;
	}
	
	public ParserRule getStorageMarkSlotRule() {
		return getStorageMarkSlotAccess().getRule();
	}
	
	//enum TIME:
	//    SECOND='seconds'|SECOND='second'|MINUTE='minutes'|MINUTE='minute'|HOUR='hours'|HOUR='hour'
	//;
	public TIMEElements getTIMEAccess() {
		return eTIME;
	}
	
	public EnumRule getTIMERule() {
		return getTIMEAccess().getRule();
	}
	
	//CameraScan:
	//    device=[Camera] 'scan' 'color' 'into' name=ID
	//;
	public CameraScanElements getCameraScanAccess() {
		return pCameraScan;
	}
	
	public ParserRule getCameraScanRule() {
		return getCameraScanAccess().getRule();
	}
	
	//CranePickup:
	//    device=[Crane] 'pickup' 'item' 'at' location=[CraneParameter]
	//;
	public CranePickupElements getCranePickupAccess() {
		return pCranePickup;
	}
	
	public ParserRule getCranePickupRule() {
		return getCranePickupAccess().getRule();
	}
	
	//CraneDrop:
	//    device=[Crane] 'drop' 'item' 'at' location=[CraneParameter]
	//;
	public CraneDropElements getCraneDropAccess() {
		return pCraneDrop;
	}
	
	public ParserRule getCraneDropRule() {
		return getCraneDropAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
