/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLogicLang.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import xtext.factoryLogicLang.COLOR;
import xtext.factoryLogicLang.CONST_VARIABLES;
import xtext.factoryLogicLang.FactoryLogicLangPackage;
import xtext.factoryLogicLang.Storage;
import xtext.factoryLogicLang.StorageMarkSlot;
import xtext.factoryLogicLang.StoragePositionParameter;
import xtext.factoryLogicLang.TIME;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Storage Mark Slot</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLogicLang.impl.StorageMarkSlotImpl#getDevice <em>Device</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.StorageMarkSlotImpl#getPosition <em>Position</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.StorageMarkSlotImpl#getComparison_const <em>Comparison const</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.StorageMarkSlotImpl#getComparison_color <em>Comparison color</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.StorageMarkSlotImpl#getComparison_int <em>Comparison int</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.StorageMarkSlotImpl#getQuantity <em>Quantity</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.StorageMarkSlotImpl#getMeasure <em>Measure</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StorageMarkSlotImpl extends OperationImpl implements StorageMarkSlot
{
  /**
   * The cached value of the '{@link #getDevice() <em>Device</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDevice()
   * @generated
   * @ordered
   */
  protected Storage device;

  /**
   * The cached value of the '{@link #getPosition() <em>Position</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPosition()
   * @generated
   * @ordered
   */
  protected StoragePositionParameter position;

  /**
   * The default value of the '{@link #getComparison_const() <em>Comparison const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_const()
   * @generated
   * @ordered
   */
  protected static final CONST_VARIABLES COMPARISON_CONST_EDEFAULT = CONST_VARIABLES.FULL;

  /**
   * The cached value of the '{@link #getComparison_const() <em>Comparison const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_const()
   * @generated
   * @ordered
   */
  protected CONST_VARIABLES comparison_const = COMPARISON_CONST_EDEFAULT;

  /**
   * The default value of the '{@link #getComparison_color() <em>Comparison color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_color()
   * @generated
   * @ordered
   */
  protected static final COLOR COMPARISON_COLOR_EDEFAULT = COLOR.RED;

  /**
   * The cached value of the '{@link #getComparison_color() <em>Comparison color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_color()
   * @generated
   * @ordered
   */
  protected COLOR comparison_color = COMPARISON_COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getComparison_int() <em>Comparison int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_int()
   * @generated
   * @ordered
   */
  protected static final int COMPARISON_INT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getComparison_int() <em>Comparison int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_int()
   * @generated
   * @ordered
   */
  protected int comparison_int = COMPARISON_INT_EDEFAULT;

  /**
   * The default value of the '{@link #getQuantity() <em>Quantity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantity()
   * @generated
   * @ordered
   */
  protected static final int QUANTITY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getQuantity() <em>Quantity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantity()
   * @generated
   * @ordered
   */
  protected int quantity = QUANTITY_EDEFAULT;

  /**
   * The default value of the '{@link #getMeasure() <em>Measure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasure()
   * @generated
   * @ordered
   */
  protected static final TIME MEASURE_EDEFAULT = TIME.SECOND;

  /**
   * The cached value of the '{@link #getMeasure() <em>Measure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasure()
   * @generated
   * @ordered
   */
  protected TIME measure = MEASURE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StorageMarkSlotImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FactoryLogicLangPackage.Literals.STORAGE_MARK_SLOT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Storage getDevice()
  {
    if (device != null && device.eIsProxy())
    {
      InternalEObject oldDevice = (InternalEObject)device;
      device = (Storage)eResolveProxy(oldDevice);
      if (device != oldDevice)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FactoryLogicLangPackage.STORAGE_MARK_SLOT__DEVICE, oldDevice, device));
      }
    }
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Storage basicGetDevice()
  {
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDevice(Storage newDevice)
  {
    Storage oldDevice = device;
    device = newDevice;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.STORAGE_MARK_SLOT__DEVICE, oldDevice, device));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StoragePositionParameter getPosition()
  {
    if (position != null && position.eIsProxy())
    {
      InternalEObject oldPosition = (InternalEObject)position;
      position = (StoragePositionParameter)eResolveProxy(oldPosition);
      if (position != oldPosition)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FactoryLogicLangPackage.STORAGE_MARK_SLOT__POSITION, oldPosition, position));
      }
    }
    return position;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StoragePositionParameter basicGetPosition()
  {
    return position;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPosition(StoragePositionParameter newPosition)
  {
    StoragePositionParameter oldPosition = position;
    position = newPosition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.STORAGE_MARK_SLOT__POSITION, oldPosition, position));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CONST_VARIABLES getComparison_const()
  {
    return comparison_const;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparison_const(CONST_VARIABLES newComparison_const)
  {
    CONST_VARIABLES oldComparison_const = comparison_const;
    comparison_const = newComparison_const == null ? COMPARISON_CONST_EDEFAULT : newComparison_const;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_CONST, oldComparison_const, comparison_const));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COLOR getComparison_color()
  {
    return comparison_color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparison_color(COLOR newComparison_color)
  {
    COLOR oldComparison_color = comparison_color;
    comparison_color = newComparison_color == null ? COMPARISON_COLOR_EDEFAULT : newComparison_color;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_COLOR, oldComparison_color, comparison_color));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getComparison_int()
  {
    return comparison_int;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparison_int(int newComparison_int)
  {
    int oldComparison_int = comparison_int;
    comparison_int = newComparison_int;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_INT, oldComparison_int, comparison_int));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getQuantity()
  {
    return quantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuantity(int newQuantity)
  {
    int oldQuantity = quantity;
    quantity = newQuantity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.STORAGE_MARK_SLOT__QUANTITY, oldQuantity, quantity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TIME getMeasure()
  {
    return measure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMeasure(TIME newMeasure)
  {
    TIME oldMeasure = measure;
    measure = newMeasure == null ? MEASURE_EDEFAULT : newMeasure;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.STORAGE_MARK_SLOT__MEASURE, oldMeasure, measure));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__DEVICE:
        if (resolve) return getDevice();
        return basicGetDevice();
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__POSITION:
        if (resolve) return getPosition();
        return basicGetPosition();
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_CONST:
        return getComparison_const();
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_COLOR:
        return getComparison_color();
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_INT:
        return getComparison_int();
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__QUANTITY:
        return getQuantity();
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__MEASURE:
        return getMeasure();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__DEVICE:
        setDevice((Storage)newValue);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__POSITION:
        setPosition((StoragePositionParameter)newValue);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_CONST:
        setComparison_const((CONST_VARIABLES)newValue);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_COLOR:
        setComparison_color((COLOR)newValue);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_INT:
        setComparison_int((Integer)newValue);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__QUANTITY:
        setQuantity((Integer)newValue);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__MEASURE:
        setMeasure((TIME)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__DEVICE:
        setDevice((Storage)null);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__POSITION:
        setPosition((StoragePositionParameter)null);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_CONST:
        setComparison_const(COMPARISON_CONST_EDEFAULT);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_COLOR:
        setComparison_color(COMPARISON_COLOR_EDEFAULT);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_INT:
        setComparison_int(COMPARISON_INT_EDEFAULT);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__QUANTITY:
        setQuantity(QUANTITY_EDEFAULT);
        return;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__MEASURE:
        setMeasure(MEASURE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__DEVICE:
        return device != null;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__POSITION:
        return position != null;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_CONST:
        return comparison_const != COMPARISON_CONST_EDEFAULT;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_COLOR:
        return comparison_color != COMPARISON_COLOR_EDEFAULT;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__COMPARISON_INT:
        return comparison_int != COMPARISON_INT_EDEFAULT;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__QUANTITY:
        return quantity != QUANTITY_EDEFAULT;
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT__MEASURE:
        return measure != MEASURE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (comparison_const: ");
    result.append(comparison_const);
    result.append(", comparison_color: ");
    result.append(comparison_color);
    result.append(", comparison_int: ");
    result.append(comparison_int);
    result.append(", quantity: ");
    result.append(quantity);
    result.append(", measure: ");
    result.append(measure);
    result.append(')');
    return result.toString();
  }

} //StorageMarkSlotImpl
