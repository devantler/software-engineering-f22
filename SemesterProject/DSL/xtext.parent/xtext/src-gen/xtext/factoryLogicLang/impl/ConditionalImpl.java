/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLogicLang.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.factoryLogicLang.BOOLEAN_OPERATOR;
import xtext.factoryLogicLang.COLOR;
import xtext.factoryLogicLang.CONST_VARIABLES;
import xtext.factoryLogicLang.Conditional;
import xtext.factoryLogicLang.Device;
import xtext.factoryLogicLang.FactoryLogicLangPackage;
import xtext.factoryLogicLang.Logic;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditional</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.factoryLogicLang.impl.ConditionalImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.ConditionalImpl#getSource <em>Source</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.ConditionalImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.ConditionalImpl#getComparison_const <em>Comparison const</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.ConditionalImpl#getComparison_color <em>Comparison color</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.ConditionalImpl#getComparison_int <em>Comparison int</em>}</li>
 *   <li>{@link xtext.factoryLogicLang.impl.ConditionalImpl#getLogics <em>Logics</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionalImpl extends LogicImpl implements Conditional
{
  /**
   * The default value of the '{@link #getVariable() <em>Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected static final String VARIABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected String variable = VARIABLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected Device source;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final BOOLEAN_OPERATOR OPERATOR_EDEFAULT = BOOLEAN_OPERATOR.NOT;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected BOOLEAN_OPERATOR operator = OPERATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getComparison_const() <em>Comparison const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_const()
   * @generated
   * @ordered
   */
  protected static final CONST_VARIABLES COMPARISON_CONST_EDEFAULT = CONST_VARIABLES.FULL;

  /**
   * The cached value of the '{@link #getComparison_const() <em>Comparison const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_const()
   * @generated
   * @ordered
   */
  protected CONST_VARIABLES comparison_const = COMPARISON_CONST_EDEFAULT;

  /**
   * The default value of the '{@link #getComparison_color() <em>Comparison color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_color()
   * @generated
   * @ordered
   */
  protected static final COLOR COMPARISON_COLOR_EDEFAULT = COLOR.RED;

  /**
   * The cached value of the '{@link #getComparison_color() <em>Comparison color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_color()
   * @generated
   * @ordered
   */
  protected COLOR comparison_color = COMPARISON_COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getComparison_int() <em>Comparison int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_int()
   * @generated
   * @ordered
   */
  protected static final int COMPARISON_INT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getComparison_int() <em>Comparison int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparison_int()
   * @generated
   * @ordered
   */
  protected int comparison_int = COMPARISON_INT_EDEFAULT;

  /**
   * The cached value of the '{@link #getLogics() <em>Logics</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogics()
   * @generated
   * @ordered
   */
  protected EList<Logic> logics;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FactoryLogicLangPackage.Literals.CONDITIONAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(String newVariable)
  {
    String oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.CONDITIONAL__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Device getSource()
  {
    if (source != null && source.eIsProxy())
    {
      InternalEObject oldSource = (InternalEObject)source;
      source = (Device)eResolveProxy(oldSource);
      if (source != oldSource)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FactoryLogicLangPackage.CONDITIONAL__SOURCE, oldSource, source));
      }
    }
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Device basicGetSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSource(Device newSource)
  {
    Device oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.CONDITIONAL__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOLEAN_OPERATOR getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(BOOLEAN_OPERATOR newOperator)
  {
    BOOLEAN_OPERATOR oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.CONDITIONAL__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CONST_VARIABLES getComparison_const()
  {
    return comparison_const;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparison_const(CONST_VARIABLES newComparison_const)
  {
    CONST_VARIABLES oldComparison_const = comparison_const;
    comparison_const = newComparison_const == null ? COMPARISON_CONST_EDEFAULT : newComparison_const;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.CONDITIONAL__COMPARISON_CONST, oldComparison_const, comparison_const));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public COLOR getComparison_color()
  {
    return comparison_color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparison_color(COLOR newComparison_color)
  {
    COLOR oldComparison_color = comparison_color;
    comparison_color = newComparison_color == null ? COMPARISON_COLOR_EDEFAULT : newComparison_color;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.CONDITIONAL__COMPARISON_COLOR, oldComparison_color, comparison_color));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getComparison_int()
  {
    return comparison_int;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparison_int(int newComparison_int)
  {
    int oldComparison_int = comparison_int;
    comparison_int = newComparison_int;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FactoryLogicLangPackage.CONDITIONAL__COMPARISON_INT, oldComparison_int, comparison_int));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Logic> getLogics()
  {
    if (logics == null)
    {
      logics = new EObjectContainmentEList<Logic>(Logic.class, this, FactoryLogicLangPackage.CONDITIONAL__LOGICS);
    }
    return logics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FactoryLogicLangPackage.CONDITIONAL__LOGICS:
        return ((InternalEList<?>)getLogics()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FactoryLogicLangPackage.CONDITIONAL__VARIABLE:
        return getVariable();
      case FactoryLogicLangPackage.CONDITIONAL__SOURCE:
        if (resolve) return getSource();
        return basicGetSource();
      case FactoryLogicLangPackage.CONDITIONAL__OPERATOR:
        return getOperator();
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_CONST:
        return getComparison_const();
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_COLOR:
        return getComparison_color();
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_INT:
        return getComparison_int();
      case FactoryLogicLangPackage.CONDITIONAL__LOGICS:
        return getLogics();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FactoryLogicLangPackage.CONDITIONAL__VARIABLE:
        setVariable((String)newValue);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__SOURCE:
        setSource((Device)newValue);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__OPERATOR:
        setOperator((BOOLEAN_OPERATOR)newValue);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_CONST:
        setComparison_const((CONST_VARIABLES)newValue);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_COLOR:
        setComparison_color((COLOR)newValue);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_INT:
        setComparison_int((Integer)newValue);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__LOGICS:
        getLogics().clear();
        getLogics().addAll((Collection<? extends Logic>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FactoryLogicLangPackage.CONDITIONAL__VARIABLE:
        setVariable(VARIABLE_EDEFAULT);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__SOURCE:
        setSource((Device)null);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_CONST:
        setComparison_const(COMPARISON_CONST_EDEFAULT);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_COLOR:
        setComparison_color(COMPARISON_COLOR_EDEFAULT);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_INT:
        setComparison_int(COMPARISON_INT_EDEFAULT);
        return;
      case FactoryLogicLangPackage.CONDITIONAL__LOGICS:
        getLogics().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FactoryLogicLangPackage.CONDITIONAL__VARIABLE:
        return VARIABLE_EDEFAULT == null ? variable != null : !VARIABLE_EDEFAULT.equals(variable);
      case FactoryLogicLangPackage.CONDITIONAL__SOURCE:
        return source != null;
      case FactoryLogicLangPackage.CONDITIONAL__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_CONST:
        return comparison_const != COMPARISON_CONST_EDEFAULT;
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_COLOR:
        return comparison_color != COMPARISON_COLOR_EDEFAULT;
      case FactoryLogicLangPackage.CONDITIONAL__COMPARISON_INT:
        return comparison_int != COMPARISON_INT_EDEFAULT;
      case FactoryLogicLangPackage.CONDITIONAL__LOGICS:
        return logics != null && !logics.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (variable: ");
    result.append(variable);
    result.append(", operator: ");
    result.append(operator);
    result.append(", comparison_const: ");
    result.append(comparison_const);
    result.append(", comparison_color: ");
    result.append(comparison_color);
    result.append(", comparison_int: ");
    result.append(comparison_int);
    result.append(')');
    return result.toString();
  }

} //ConditionalImpl
