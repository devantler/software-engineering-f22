/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLogicLang.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import xtext.factoryLogicLang.Camera;
import xtext.factoryLogicLang.CameraParameter;
import xtext.factoryLogicLang.CameraScan;
import xtext.factoryLogicLang.Conditional;
import xtext.factoryLogicLang.Crane;
import xtext.factoryLogicLang.CraneDrop;
import xtext.factoryLogicLang.CraneParameter;
import xtext.factoryLogicLang.CranePickup;
import xtext.factoryLogicLang.Declaration;
import xtext.factoryLogicLang.Device;
import xtext.factoryLogicLang.FactoryLogicLangFactory;
import xtext.factoryLogicLang.FactoryLogicLangPackage;
import xtext.factoryLogicLang.Logic;
import xtext.factoryLogicLang.Loop;
import xtext.factoryLogicLang.Model;
import xtext.factoryLogicLang.Operation;
import xtext.factoryLogicLang.Storage;
import xtext.factoryLogicLang.StorageMarkSlot;
import xtext.factoryLogicLang.StorageMoveEmptySlot;
import xtext.factoryLogicLang.StorageMoveSlot;
import xtext.factoryLogicLang.StorageParameter;
import xtext.factoryLogicLang.StoragePositionParameter;
import xtext.factoryLogicLang.StorageSlotParameter;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FactoryLogicLangPackageImpl extends EPackageImpl implements FactoryLogicLangPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass declarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deviceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass storageEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass storageParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass storageSlotParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass storagePositionParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass logicEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loopEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass storageMoveEmptySlotEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass storageMoveSlotEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass storageMarkSlotEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cameraScanEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cranePickupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass craneDropEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum colorEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum consT_VARIABLESEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum booleaN_OPERATOREEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum timeEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see xtext.factoryLogicLang.FactoryLogicLangPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private FactoryLogicLangPackageImpl()
  {
    super(eNS_URI, FactoryLogicLangFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link FactoryLogicLangPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static FactoryLogicLangPackage init()
  {
    if (isInited) return (FactoryLogicLangPackage)EPackage.Registry.INSTANCE.getEPackage(FactoryLogicLangPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredFactoryLogicLangPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    FactoryLogicLangPackageImpl theFactoryLogicLangPackage = registeredFactoryLogicLangPackage instanceof FactoryLogicLangPackageImpl ? (FactoryLogicLangPackageImpl)registeredFactoryLogicLangPackage : new FactoryLogicLangPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theFactoryLogicLangPackage.createPackageContents();

    // Initialize created meta-data
    theFactoryLogicLangPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theFactoryLogicLangPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(FactoryLogicLangPackage.eNS_URI, theFactoryLogicLangPackage);
    return theFactoryLogicLangPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Declarations()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeclaration()
  {
    return declarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDevice()
  {
    return deviceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDevice_Name()
  {
    return (EAttribute)deviceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCrane()
  {
    return craneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCrane_Parameters()
  {
    return (EReference)craneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCraneParameter()
  {
    return craneParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCraneParameter_Degree()
  {
    return (EAttribute)craneParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCraneParameter_Name()
  {
    return (EAttribute)craneParameterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStorage()
  {
    return storageEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStorage_Parameters()
  {
    return (EReference)storageEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStorageParameter()
  {
    return storageParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStorageSlotParameter()
  {
    return storageSlotParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStorageSlotParameter_Slots()
  {
    return (EAttribute)storageSlotParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStoragePositionParameter()
  {
    return storagePositionParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStoragePositionParameter_Slot()
  {
    return (EAttribute)storagePositionParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStoragePositionParameter_Name()
  {
    return (EAttribute)storagePositionParameterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCamera()
  {
    return cameraEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCamera_Parameters()
  {
    return (EReference)cameraEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCameraParameter()
  {
    return cameraParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCameraParameter_Color()
  {
    return (EAttribute)cameraParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLogic()
  {
    return logicEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditional()
  {
    return conditionalEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConditional_Variable()
  {
    return (EAttribute)conditionalEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditional_Source()
  {
    return (EReference)conditionalEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConditional_Operator()
  {
    return (EAttribute)conditionalEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConditional_Comparison_const()
  {
    return (EAttribute)conditionalEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConditional_Comparison_color()
  {
    return (EAttribute)conditionalEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConditional_Comparison_int()
  {
    return (EAttribute)conditionalEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditional_Logics()
  {
    return (EReference)conditionalEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLoop()
  {
    return loopEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoop_Name()
  {
    return (EAttribute)loopEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoop_List()
  {
    return (EAttribute)loopEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoop_Source()
  {
    return (EReference)loopEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoop_Operator()
  {
    return (EAttribute)loopEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoop_Comparison_const()
  {
    return (EAttribute)loopEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoop_Comparison_color()
  {
    return (EAttribute)loopEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoop_Comparison_int()
  {
    return (EAttribute)loopEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoop_Logics()
  {
    return (EReference)loopEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperation()
  {
    return operationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStorageMoveEmptySlot()
  {
    return storageMoveEmptySlotEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStorageMoveEmptySlot_Device()
  {
    return (EReference)storageMoveEmptySlotEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStorageMoveEmptySlot_Destination()
  {
    return (EReference)storageMoveEmptySlotEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStorageMoveSlot()
  {
    return storageMoveSlotEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStorageMoveSlot_Device()
  {
    return (EReference)storageMoveSlotEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStorageMoveSlot_Position()
  {
    return (EReference)storageMoveSlotEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStorageMoveSlot_Destination()
  {
    return (EReference)storageMoveSlotEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStorageMarkSlot()
  {
    return storageMarkSlotEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStorageMarkSlot_Device()
  {
    return (EReference)storageMarkSlotEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStorageMarkSlot_Position()
  {
    return (EReference)storageMarkSlotEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStorageMarkSlot_Comparison_const()
  {
    return (EAttribute)storageMarkSlotEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStorageMarkSlot_Comparison_color()
  {
    return (EAttribute)storageMarkSlotEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStorageMarkSlot_Comparison_int()
  {
    return (EAttribute)storageMarkSlotEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStorageMarkSlot_Quantity()
  {
    return (EAttribute)storageMarkSlotEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStorageMarkSlot_Measure()
  {
    return (EAttribute)storageMarkSlotEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCameraScan()
  {
    return cameraScanEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCameraScan_Device()
  {
    return (EReference)cameraScanEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCameraScan_Name()
  {
    return (EAttribute)cameraScanEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCranePickup()
  {
    return cranePickupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCranePickup_Device()
  {
    return (EReference)cranePickupEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCranePickup_Location()
  {
    return (EReference)cranePickupEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCraneDrop()
  {
    return craneDropEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCraneDrop_Device()
  {
    return (EReference)craneDropEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCraneDrop_Location()
  {
    return (EReference)craneDropEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCOLOR()
  {
    return colorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCONST_VARIABLES()
  {
    return consT_VARIABLESEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getBOOLEAN_OPERATOR()
  {
    return booleaN_OPERATOREEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getTIME()
  {
    return timeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FactoryLogicLangFactory getFactoryLogicLangFactory()
  {
    return (FactoryLogicLangFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__DECLARATIONS);

    declarationEClass = createEClass(DECLARATION);

    deviceEClass = createEClass(DEVICE);
    createEAttribute(deviceEClass, DEVICE__NAME);

    craneEClass = createEClass(CRANE);
    createEReference(craneEClass, CRANE__PARAMETERS);

    craneParameterEClass = createEClass(CRANE_PARAMETER);
    createEAttribute(craneParameterEClass, CRANE_PARAMETER__DEGREE);
    createEAttribute(craneParameterEClass, CRANE_PARAMETER__NAME);

    storageEClass = createEClass(STORAGE);
    createEReference(storageEClass, STORAGE__PARAMETERS);

    storageParameterEClass = createEClass(STORAGE_PARAMETER);

    storageSlotParameterEClass = createEClass(STORAGE_SLOT_PARAMETER);
    createEAttribute(storageSlotParameterEClass, STORAGE_SLOT_PARAMETER__SLOTS);

    storagePositionParameterEClass = createEClass(STORAGE_POSITION_PARAMETER);
    createEAttribute(storagePositionParameterEClass, STORAGE_POSITION_PARAMETER__SLOT);
    createEAttribute(storagePositionParameterEClass, STORAGE_POSITION_PARAMETER__NAME);

    cameraEClass = createEClass(CAMERA);
    createEReference(cameraEClass, CAMERA__PARAMETERS);

    cameraParameterEClass = createEClass(CAMERA_PARAMETER);
    createEAttribute(cameraParameterEClass, CAMERA_PARAMETER__COLOR);

    logicEClass = createEClass(LOGIC);

    conditionalEClass = createEClass(CONDITIONAL);
    createEAttribute(conditionalEClass, CONDITIONAL__VARIABLE);
    createEReference(conditionalEClass, CONDITIONAL__SOURCE);
    createEAttribute(conditionalEClass, CONDITIONAL__OPERATOR);
    createEAttribute(conditionalEClass, CONDITIONAL__COMPARISON_CONST);
    createEAttribute(conditionalEClass, CONDITIONAL__COMPARISON_COLOR);
    createEAttribute(conditionalEClass, CONDITIONAL__COMPARISON_INT);
    createEReference(conditionalEClass, CONDITIONAL__LOGICS);

    loopEClass = createEClass(LOOP);
    createEAttribute(loopEClass, LOOP__NAME);
    createEAttribute(loopEClass, LOOP__LIST);
    createEReference(loopEClass, LOOP__SOURCE);
    createEAttribute(loopEClass, LOOP__OPERATOR);
    createEAttribute(loopEClass, LOOP__COMPARISON_CONST);
    createEAttribute(loopEClass, LOOP__COMPARISON_COLOR);
    createEAttribute(loopEClass, LOOP__COMPARISON_INT);
    createEReference(loopEClass, LOOP__LOGICS);

    operationEClass = createEClass(OPERATION);

    storageMoveEmptySlotEClass = createEClass(STORAGE_MOVE_EMPTY_SLOT);
    createEReference(storageMoveEmptySlotEClass, STORAGE_MOVE_EMPTY_SLOT__DEVICE);
    createEReference(storageMoveEmptySlotEClass, STORAGE_MOVE_EMPTY_SLOT__DESTINATION);

    storageMoveSlotEClass = createEClass(STORAGE_MOVE_SLOT);
    createEReference(storageMoveSlotEClass, STORAGE_MOVE_SLOT__DEVICE);
    createEReference(storageMoveSlotEClass, STORAGE_MOVE_SLOT__POSITION);
    createEReference(storageMoveSlotEClass, STORAGE_MOVE_SLOT__DESTINATION);

    storageMarkSlotEClass = createEClass(STORAGE_MARK_SLOT);
    createEReference(storageMarkSlotEClass, STORAGE_MARK_SLOT__DEVICE);
    createEReference(storageMarkSlotEClass, STORAGE_MARK_SLOT__POSITION);
    createEAttribute(storageMarkSlotEClass, STORAGE_MARK_SLOT__COMPARISON_CONST);
    createEAttribute(storageMarkSlotEClass, STORAGE_MARK_SLOT__COMPARISON_COLOR);
    createEAttribute(storageMarkSlotEClass, STORAGE_MARK_SLOT__COMPARISON_INT);
    createEAttribute(storageMarkSlotEClass, STORAGE_MARK_SLOT__QUANTITY);
    createEAttribute(storageMarkSlotEClass, STORAGE_MARK_SLOT__MEASURE);

    cameraScanEClass = createEClass(CAMERA_SCAN);
    createEReference(cameraScanEClass, CAMERA_SCAN__DEVICE);
    createEAttribute(cameraScanEClass, CAMERA_SCAN__NAME);

    cranePickupEClass = createEClass(CRANE_PICKUP);
    createEReference(cranePickupEClass, CRANE_PICKUP__DEVICE);
    createEReference(cranePickupEClass, CRANE_PICKUP__LOCATION);

    craneDropEClass = createEClass(CRANE_DROP);
    createEReference(craneDropEClass, CRANE_DROP__DEVICE);
    createEReference(craneDropEClass, CRANE_DROP__LOCATION);

    // Create enums
    colorEEnum = createEEnum(COLOR);
    consT_VARIABLESEEnum = createEEnum(CONST_VARIABLES);
    booleaN_OPERATOREEnum = createEEnum(BOOLEAN_OPERATOR);
    timeEEnum = createEEnum(TIME);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    deviceEClass.getESuperTypes().add(this.getDeclaration());
    craneEClass.getESuperTypes().add(this.getDevice());
    storageEClass.getESuperTypes().add(this.getDevice());
    storageSlotParameterEClass.getESuperTypes().add(this.getStorageParameter());
    storagePositionParameterEClass.getESuperTypes().add(this.getStorageParameter());
    cameraEClass.getESuperTypes().add(this.getDevice());
    logicEClass.getESuperTypes().add(this.getDeclaration());
    conditionalEClass.getESuperTypes().add(this.getLogic());
    loopEClass.getESuperTypes().add(this.getLogic());
    operationEClass.getESuperTypes().add(this.getLogic());
    storageMoveEmptySlotEClass.getESuperTypes().add(this.getOperation());
    storageMoveSlotEClass.getESuperTypes().add(this.getOperation());
    storageMarkSlotEClass.getESuperTypes().add(this.getOperation());
    cameraScanEClass.getESuperTypes().add(this.getOperation());
    cranePickupEClass.getESuperTypes().add(this.getOperation());
    craneDropEClass.getESuperTypes().add(this.getOperation());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Declarations(), this.getDeclaration(), null, "declarations", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(declarationEClass, Declaration.class, "Declaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(deviceEClass, Device.class, "Device", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDevice_Name(), ecorePackage.getEString(), "name", null, 0, 1, Device.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(craneEClass, Crane.class, "Crane", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCrane_Parameters(), this.getCraneParameter(), null, "parameters", null, 0, -1, Crane.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(craneParameterEClass, CraneParameter.class, "CraneParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCraneParameter_Degree(), ecorePackage.getEInt(), "degree", null, 0, 1, CraneParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCraneParameter_Name(), ecorePackage.getEString(), "name", null, 0, 1, CraneParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(storageEClass, Storage.class, "Storage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStorage_Parameters(), this.getStorageParameter(), null, "parameters", null, 0, -1, Storage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(storageParameterEClass, StorageParameter.class, "StorageParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(storageSlotParameterEClass, StorageSlotParameter.class, "StorageSlotParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStorageSlotParameter_Slots(), ecorePackage.getEInt(), "slots", null, 0, 1, StorageSlotParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(storagePositionParameterEClass, StoragePositionParameter.class, "StoragePositionParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStoragePositionParameter_Slot(), ecorePackage.getEInt(), "slot", null, 0, 1, StoragePositionParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStoragePositionParameter_Name(), ecorePackage.getEString(), "name", null, 0, 1, StoragePositionParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cameraEClass, Camera.class, "Camera", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCamera_Parameters(), this.getCameraParameter(), null, "parameters", null, 0, -1, Camera.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cameraParameterEClass, CameraParameter.class, "CameraParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCameraParameter_Color(), this.getCOLOR(), "color", null, 0, 1, CameraParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(logicEClass, Logic.class, "Logic", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(conditionalEClass, Conditional.class, "Conditional", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConditional_Variable(), ecorePackage.getEString(), "variable", null, 0, 1, Conditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditional_Source(), this.getDevice(), null, "source", null, 0, 1, Conditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConditional_Operator(), this.getBOOLEAN_OPERATOR(), "operator", null, 0, 1, Conditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConditional_Comparison_const(), this.getCONST_VARIABLES(), "comparison_const", null, 0, 1, Conditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConditional_Comparison_color(), this.getCOLOR(), "comparison_color", null, 0, 1, Conditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConditional_Comparison_int(), ecorePackage.getEInt(), "comparison_int", null, 0, 1, Conditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditional_Logics(), this.getLogic(), null, "logics", null, 0, -1, Conditional.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(loopEClass, Loop.class, "Loop", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLoop_Name(), ecorePackage.getEString(), "name", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoop_List(), ecorePackage.getEString(), "list", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoop_Source(), this.getDevice(), null, "source", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoop_Operator(), this.getBOOLEAN_OPERATOR(), "operator", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoop_Comparison_const(), this.getCONST_VARIABLES(), "comparison_const", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoop_Comparison_color(), this.getCOLOR(), "comparison_color", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLoop_Comparison_int(), ecorePackage.getEInt(), "comparison_int", null, 0, 1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoop_Logics(), this.getLogic(), null, "logics", null, 0, -1, Loop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(operationEClass, Operation.class, "Operation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(storageMoveEmptySlotEClass, StorageMoveEmptySlot.class, "StorageMoveEmptySlot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStorageMoveEmptySlot_Device(), this.getStorage(), null, "device", null, 0, 1, StorageMoveEmptySlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStorageMoveEmptySlot_Destination(), this.getStoragePositionParameter(), null, "destination", null, 0, 1, StorageMoveEmptySlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(storageMoveSlotEClass, StorageMoveSlot.class, "StorageMoveSlot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStorageMoveSlot_Device(), this.getStorage(), null, "device", null, 0, 1, StorageMoveSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStorageMoveSlot_Position(), this.getStoragePositionParameter(), null, "position", null, 0, 1, StorageMoveSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStorageMoveSlot_Destination(), this.getStoragePositionParameter(), null, "destination", null, 0, 1, StorageMoveSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(storageMarkSlotEClass, StorageMarkSlot.class, "StorageMarkSlot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStorageMarkSlot_Device(), this.getStorage(), null, "device", null, 0, 1, StorageMarkSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStorageMarkSlot_Position(), this.getStoragePositionParameter(), null, "position", null, 0, 1, StorageMarkSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStorageMarkSlot_Comparison_const(), this.getCONST_VARIABLES(), "comparison_const", null, 0, 1, StorageMarkSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStorageMarkSlot_Comparison_color(), this.getCOLOR(), "comparison_color", null, 0, 1, StorageMarkSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStorageMarkSlot_Comparison_int(), ecorePackage.getEInt(), "comparison_int", null, 0, 1, StorageMarkSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStorageMarkSlot_Quantity(), ecorePackage.getEInt(), "quantity", null, 0, 1, StorageMarkSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStorageMarkSlot_Measure(), this.getTIME(), "measure", null, 0, 1, StorageMarkSlot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cameraScanEClass, CameraScan.class, "CameraScan", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCameraScan_Device(), this.getCamera(), null, "device", null, 0, 1, CameraScan.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCameraScan_Name(), ecorePackage.getEString(), "name", null, 0, 1, CameraScan.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cranePickupEClass, CranePickup.class, "CranePickup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCranePickup_Device(), this.getCrane(), null, "device", null, 0, 1, CranePickup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCranePickup_Location(), this.getCraneParameter(), null, "location", null, 0, 1, CranePickup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(craneDropEClass, CraneDrop.class, "CraneDrop", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCraneDrop_Device(), this.getCrane(), null, "device", null, 0, 1, CraneDrop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCraneDrop_Location(), this.getCraneParameter(), null, "location", null, 0, 1, CraneDrop.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(colorEEnum, xtext.factoryLogicLang.COLOR.class, "COLOR");
    addEEnumLiteral(colorEEnum, xtext.factoryLogicLang.COLOR.RED);
    addEEnumLiteral(colorEEnum, xtext.factoryLogicLang.COLOR.BLUE);
    addEEnumLiteral(colorEEnum, xtext.factoryLogicLang.COLOR.GREEN);

    initEEnum(consT_VARIABLESEEnum, xtext.factoryLogicLang.CONST_VARIABLES.class, "CONST_VARIABLES");
    addEEnumLiteral(consT_VARIABLESEEnum, xtext.factoryLogicLang.CONST_VARIABLES.FULL);
    addEEnumLiteral(consT_VARIABLESEEnum, xtext.factoryLogicLang.CONST_VARIABLES.FINISHED);
    addEEnumLiteral(consT_VARIABLESEEnum, xtext.factoryLogicLang.CONST_VARIABLES.EMPTY);

    initEEnum(booleaN_OPERATOREEnum, xtext.factoryLogicLang.BOOLEAN_OPERATOR.class, "BOOLEAN_OPERATOR");
    addEEnumLiteral(booleaN_OPERATOREEnum, xtext.factoryLogicLang.BOOLEAN_OPERATOR.NOT);
    addEEnumLiteral(booleaN_OPERATOREEnum, xtext.factoryLogicLang.BOOLEAN_OPERATOR.LESS);
    addEEnumLiteral(booleaN_OPERATOREEnum, xtext.factoryLogicLang.BOOLEAN_OPERATOR.GREATER);

    initEEnum(timeEEnum, xtext.factoryLogicLang.TIME.class, "TIME");
    addEEnumLiteral(timeEEnum, xtext.factoryLogicLang.TIME.SECOND);
    addEEnumLiteral(timeEEnum, xtext.factoryLogicLang.TIME.MINUTE);
    addEEnumLiteral(timeEEnum, xtext.factoryLogicLang.TIME.HOUR);

    // Create resource
    createResource(eNS_URI);
  }

} //FactoryLogicLangPackageImpl
