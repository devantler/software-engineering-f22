/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLogicLang.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import xtext.factoryLogicLang.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see xtext.factoryLogicLang.FactoryLogicLangPackage
 * @generated
 */
public class FactoryLogicLangSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FactoryLogicLangPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FactoryLogicLangSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = FactoryLogicLangPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case FactoryLogicLangPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.DECLARATION:
      {
        Declaration declaration = (Declaration)theEObject;
        T result = caseDeclaration(declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.DEVICE:
      {
        Device device = (Device)theEObject;
        T result = caseDevice(device);
        if (result == null) result = caseDeclaration(device);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.CRANE:
      {
        Crane crane = (Crane)theEObject;
        T result = caseCrane(crane);
        if (result == null) result = caseDevice(crane);
        if (result == null) result = caseDeclaration(crane);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.CRANE_PARAMETER:
      {
        CraneParameter craneParameter = (CraneParameter)theEObject;
        T result = caseCraneParameter(craneParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.STORAGE:
      {
        Storage storage = (Storage)theEObject;
        T result = caseStorage(storage);
        if (result == null) result = caseDevice(storage);
        if (result == null) result = caseDeclaration(storage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.STORAGE_PARAMETER:
      {
        StorageParameter storageParameter = (StorageParameter)theEObject;
        T result = caseStorageParameter(storageParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.STORAGE_SLOT_PARAMETER:
      {
        StorageSlotParameter storageSlotParameter = (StorageSlotParameter)theEObject;
        T result = caseStorageSlotParameter(storageSlotParameter);
        if (result == null) result = caseStorageParameter(storageSlotParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.STORAGE_POSITION_PARAMETER:
      {
        StoragePositionParameter storagePositionParameter = (StoragePositionParameter)theEObject;
        T result = caseStoragePositionParameter(storagePositionParameter);
        if (result == null) result = caseStorageParameter(storagePositionParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.CAMERA:
      {
        Camera camera = (Camera)theEObject;
        T result = caseCamera(camera);
        if (result == null) result = caseDevice(camera);
        if (result == null) result = caseDeclaration(camera);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.CAMERA_PARAMETER:
      {
        CameraParameter cameraParameter = (CameraParameter)theEObject;
        T result = caseCameraParameter(cameraParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.LOGIC:
      {
        Logic logic = (Logic)theEObject;
        T result = caseLogic(logic);
        if (result == null) result = caseDeclaration(logic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.CONDITIONAL:
      {
        Conditional conditional = (Conditional)theEObject;
        T result = caseConditional(conditional);
        if (result == null) result = caseLogic(conditional);
        if (result == null) result = caseDeclaration(conditional);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.LOOP:
      {
        Loop loop = (Loop)theEObject;
        T result = caseLoop(loop);
        if (result == null) result = caseLogic(loop);
        if (result == null) result = caseDeclaration(loop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = caseLogic(operation);
        if (result == null) result = caseDeclaration(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.STORAGE_MOVE_EMPTY_SLOT:
      {
        StorageMoveEmptySlot storageMoveEmptySlot = (StorageMoveEmptySlot)theEObject;
        T result = caseStorageMoveEmptySlot(storageMoveEmptySlot);
        if (result == null) result = caseOperation(storageMoveEmptySlot);
        if (result == null) result = caseLogic(storageMoveEmptySlot);
        if (result == null) result = caseDeclaration(storageMoveEmptySlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.STORAGE_MOVE_SLOT:
      {
        StorageMoveSlot storageMoveSlot = (StorageMoveSlot)theEObject;
        T result = caseStorageMoveSlot(storageMoveSlot);
        if (result == null) result = caseOperation(storageMoveSlot);
        if (result == null) result = caseLogic(storageMoveSlot);
        if (result == null) result = caseDeclaration(storageMoveSlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.STORAGE_MARK_SLOT:
      {
        StorageMarkSlot storageMarkSlot = (StorageMarkSlot)theEObject;
        T result = caseStorageMarkSlot(storageMarkSlot);
        if (result == null) result = caseOperation(storageMarkSlot);
        if (result == null) result = caseLogic(storageMarkSlot);
        if (result == null) result = caseDeclaration(storageMarkSlot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.CAMERA_SCAN:
      {
        CameraScan cameraScan = (CameraScan)theEObject;
        T result = caseCameraScan(cameraScan);
        if (result == null) result = caseOperation(cameraScan);
        if (result == null) result = caseLogic(cameraScan);
        if (result == null) result = caseDeclaration(cameraScan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.CRANE_PICKUP:
      {
        CranePickup cranePickup = (CranePickup)theEObject;
        T result = caseCranePickup(cranePickup);
        if (result == null) result = caseOperation(cranePickup);
        if (result == null) result = caseLogic(cranePickup);
        if (result == null) result = caseDeclaration(cranePickup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FactoryLogicLangPackage.CRANE_DROP:
      {
        CraneDrop craneDrop = (CraneDrop)theEObject;
        T result = caseCraneDrop(craneDrop);
        if (result == null) result = caseOperation(craneDrop);
        if (result == null) result = caseLogic(craneDrop);
        if (result == null) result = caseDeclaration(craneDrop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaration(Declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Device</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Device</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDevice(Device object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Crane</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Crane</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCrane(Crane object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Crane Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Crane Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCraneParameter(CraneParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Storage</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Storage</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStorage(Storage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Storage Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Storage Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStorageParameter(StorageParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Storage Slot Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Storage Slot Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStorageSlotParameter(StorageSlotParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Storage Position Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Storage Position Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStoragePositionParameter(StoragePositionParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Camera</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Camera</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCamera(Camera object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Camera Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Camera Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCameraParameter(CameraParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogic(Logic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditional(Conditional object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoop(Loop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Storage Move Empty Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Storage Move Empty Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStorageMoveEmptySlot(StorageMoveEmptySlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Storage Move Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Storage Move Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStorageMoveSlot(StorageMoveSlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Storage Mark Slot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Storage Mark Slot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStorageMarkSlot(StorageMarkSlot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Camera Scan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Camera Scan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCameraScan(CameraScan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Crane Pickup</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Crane Pickup</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCranePickup(CranePickup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Crane Drop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Crane Drop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCraneDrop(CraneDrop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //FactoryLogicLangSwitch
