/**
 * generated by Xtext 2.25.0
 */
package xtext.factoryLogicLang.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import xtext.factoryLogicLang.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see xtext.factoryLogicLang.FactoryLogicLangPackage
 * @generated
 */
public class FactoryLogicLangAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FactoryLogicLangPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FactoryLogicLangAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = FactoryLogicLangPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FactoryLogicLangSwitch<Adapter> modelSwitch =
    new FactoryLogicLangSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseDeclaration(Declaration object)
      {
        return createDeclarationAdapter();
      }
      @Override
      public Adapter caseDevice(Device object)
      {
        return createDeviceAdapter();
      }
      @Override
      public Adapter caseCrane(Crane object)
      {
        return createCraneAdapter();
      }
      @Override
      public Adapter caseCraneParameter(CraneParameter object)
      {
        return createCraneParameterAdapter();
      }
      @Override
      public Adapter caseStorage(Storage object)
      {
        return createStorageAdapter();
      }
      @Override
      public Adapter caseStorageParameter(StorageParameter object)
      {
        return createStorageParameterAdapter();
      }
      @Override
      public Adapter caseStorageSlotParameter(StorageSlotParameter object)
      {
        return createStorageSlotParameterAdapter();
      }
      @Override
      public Adapter caseStoragePositionParameter(StoragePositionParameter object)
      {
        return createStoragePositionParameterAdapter();
      }
      @Override
      public Adapter caseCamera(Camera object)
      {
        return createCameraAdapter();
      }
      @Override
      public Adapter caseCameraParameter(CameraParameter object)
      {
        return createCameraParameterAdapter();
      }
      @Override
      public Adapter caseLogic(Logic object)
      {
        return createLogicAdapter();
      }
      @Override
      public Adapter caseConditional(Conditional object)
      {
        return createConditionalAdapter();
      }
      @Override
      public Adapter caseLoop(Loop object)
      {
        return createLoopAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseStorageMoveEmptySlot(StorageMoveEmptySlot object)
      {
        return createStorageMoveEmptySlotAdapter();
      }
      @Override
      public Adapter caseStorageMoveSlot(StorageMoveSlot object)
      {
        return createStorageMoveSlotAdapter();
      }
      @Override
      public Adapter caseStorageMarkSlot(StorageMarkSlot object)
      {
        return createStorageMarkSlotAdapter();
      }
      @Override
      public Adapter caseCameraScan(CameraScan object)
      {
        return createCameraScanAdapter();
      }
      @Override
      public Adapter caseCranePickup(CranePickup object)
      {
        return createCranePickupAdapter();
      }
      @Override
      public Adapter caseCraneDrop(CraneDrop object)
      {
        return createCraneDropAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Declaration <em>Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Declaration
   * @generated
   */
  public Adapter createDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Device <em>Device</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Device
   * @generated
   */
  public Adapter createDeviceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Crane <em>Crane</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Crane
   * @generated
   */
  public Adapter createCraneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.CraneParameter <em>Crane Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.CraneParameter
   * @generated
   */
  public Adapter createCraneParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Storage <em>Storage</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Storage
   * @generated
   */
  public Adapter createStorageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.StorageParameter <em>Storage Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.StorageParameter
   * @generated
   */
  public Adapter createStorageParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.StorageSlotParameter <em>Storage Slot Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.StorageSlotParameter
   * @generated
   */
  public Adapter createStorageSlotParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.StoragePositionParameter <em>Storage Position Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.StoragePositionParameter
   * @generated
   */
  public Adapter createStoragePositionParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Camera <em>Camera</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Camera
   * @generated
   */
  public Adapter createCameraAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.CameraParameter <em>Camera Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.CameraParameter
   * @generated
   */
  public Adapter createCameraParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Logic <em>Logic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Logic
   * @generated
   */
  public Adapter createLogicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Conditional <em>Conditional</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Conditional
   * @generated
   */
  public Adapter createConditionalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Loop <em>Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Loop
   * @generated
   */
  public Adapter createLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.StorageMoveEmptySlot <em>Storage Move Empty Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.StorageMoveEmptySlot
   * @generated
   */
  public Adapter createStorageMoveEmptySlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.StorageMoveSlot <em>Storage Move Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.StorageMoveSlot
   * @generated
   */
  public Adapter createStorageMoveSlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.StorageMarkSlot <em>Storage Mark Slot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.StorageMarkSlot
   * @generated
   */
  public Adapter createStorageMarkSlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.CameraScan <em>Camera Scan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.CameraScan
   * @generated
   */
  public Adapter createCameraScanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.CranePickup <em>Crane Pickup</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.CranePickup
   * @generated
   */
  public Adapter createCranePickupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link xtext.factoryLogicLang.CraneDrop <em>Crane Drop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see xtext.factoryLogicLang.CraneDrop
   * @generated
   */
  public Adapter createCraneDropAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //FactoryLogicLangAdapterFactory
